@model PosterForm.Models.FullViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "Lines", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Line</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, "Username :", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Raw(User.Identity.Name)
                @Html.HiddenFor(model => model.UserName, new { Value = this.User.Identity.Name })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Department, new List<SelectListItem> {
                    new SelectListItem{ Text="Please select a department", Value=""},
                    new SelectListItem{ Text="@One", Value="@One"},
                    new SelectListItem{ Text="Accounting", Value="Accounting"},
                    new SelectListItem{ Text="Administration", Value="Administration"},
                    new SelectListItem{ Text="Admissions", Value="Admissions"},
                    new SelectListItem{ Text="Agricultural Science", Value="Agricultural Science"},
                    new SelectListItem{ Text="Anthropology", Value="Anthropology"},
                    new SelectListItem{ Text="Art", Value="Art"},
                    new SelectListItem{ Text="ASUN", Value="ASUN"},
                    new SelectListItem{ Text="Athletics", Value="Athletics"},
                    new SelectListItem{ Text="Atmospheric Science", Value="Atmospheric Science"},
                    new SelectListItem{ Text="Basque Studies", Value="Basque Studies"},
                    new SelectListItem{ Text="Biochemistry", Value="Biochemistry"},
                    new SelectListItem{ Text="Biology", Value="Biology"},
                    new SelectListItem{ Text="Biomedical Engineering", Value="Biomedical Engineering"},
                    new SelectListItem{ Text="Biotechnology", Value="Biotechnology"},
                    new SelectListItem{ Text="Building Operations", Value="Building Operations"},
                    new SelectListItem{ Text="Biotechnology", Value="Biotechnology"},
                    new SelectListItem{ Text="Building Operations", Value="Building Operations"},
                    new SelectListItem{ Text="Business", Value="Business"},
                    new SelectListItem{ Text="Business Admin", Value="Business Admin"},
                    new SelectListItem{ Text="Business Management", Value="Business Management"},
                    new SelectListItem{ Text="Business Marketing", Value="Business Marketing"},
                    new SelectListItem{ Text="CABNR", Value="CABNR"},
                    new SelectListItem{ Text="CASAT", Value="CASAT"},
                    new SelectListItem{ Text="Center for Student Cultural Diversity", Value="Center for Student Cultural Diversity"},
                    new SelectListItem{ Text="Center for Student Engagement", Value="Center for Student Engagement"},
                    new SelectListItem{ Text="Chemical Engineering", Value="Chemical Engineering"},
                    new SelectListItem{ Text="Chemistry", Value="Chemistry"},
                    new SelectListItem{ Text="Civil Engineering", Value="Civil Engineering"},
                    new SelectListItem{ Text="College of Education", Value="College of Education"},
                    new SelectListItem{ Text="Communications", Value="Communications"},
                    new SelectListItem{ Text="Community Health Science", Value="Community Health Science"},
                    new SelectListItem{ Text="Computer Science Engineering", Value="Computer Science Engineering"},
                    new SelectListItem{ Text="Core Humanities", Value="Core Humanities"},
                    new SelectListItem{ Text="Counseling", Value="Counseling"},
                    new SelectListItem{ Text="Criminal Justice", Value="Criminal Justice"},
                    new SelectListItem{ Text="Dance", Value="Dance"},
                    new SelectListItem{ Text="Davidson Academy", Value="Davidson Academy"},
                    new SelectListItem{ Text="Desktop Services", Value="Desktop Services"},
                    new SelectListItem{ Text="Development and Alumni Relations", Value="Development and Alumni Relations"},
                    new SelectListItem{ Text="Digital Media", Value="Digital Media"},
                    new SelectListItem{ Text="Disability Resource Center", Value="Disability Resource Center"},
                    new SelectListItem{ Text="Ecohydrology", Value="Ecohydrology"},
                    new SelectListItem{ Text="Economics", Value="Economics"},
                    new SelectListItem{ Text="Education", Value="Education"},
                    new SelectListItem{ Text="Education Leadership", Value="Education Leadership"},
                    new SelectListItem{ Text="Electrical Engineering", Value="Electrical Engineering"},
                    new SelectListItem{ Text="Elementary Educatio", Value="Elementary Education"},
                    new SelectListItem{ Text="Engineering", Value="Engineering"},
                    new SelectListItem{ Text="English", Value="English"},
                    new SelectListItem{ Text="English Literature", Value="English Literature"},
                    new SelectListItem{ Text="Environmental Health &amp; Safety", Value="Environmental Health &amp; Safety"},
                    new SelectListItem{ Text="Environmental Science", Value="Environmental Science"},
                    new SelectListItem{ Text="Extended Studies", Value="Extended Studies"},
                    new SelectListItem{ Text="Facilities", Value="Facilities"},
                    new SelectListItem{ Text="Faculty/Staff", Value="Faculty/Staff"},
                    new SelectListItem{ Text="Finance", Value="Finance"},
                    new SelectListItem{ Text="Fine Arts", Value="Fine Arts"},
                    new SelectListItem{ Text="Foreign Language", Value="Foreign Language"},
                    new SelectListItem{ Text="French", Value="French"},
                    new SelectListItem{ Text="GEAR UP", Value="GEAR UP"},
                    new SelectListItem{ Text="Gender, Race, and Identity", Value="Gender, Race, and Identity"},
                    new SelectListItem{ Text="General Studies", Value="General Studies"},
                    new SelectListItem{ Text="Geography", Value="Geography"},
                    new SelectListItem{ Text="Geological Engineering", Value="Geological Engineering"},
                    new SelectListItem{ Text="Geology", Value="Geology"},
                    new SelectListItem{ Text="Gerontology", Value="Gerontology"},
                    new SelectListItem{ Text="Grad Special", Value="Grad Special"},
                    new SelectListItem{ Text="Graduate School", Value="Graduate School"},
                    new SelectListItem{ Text="HDFS", Value="HDFS"},
                    new SelectListItem{ Text="Health Science", Value="Health Science"},
                    new SelectListItem{ Text="History", Value="History"},
                    new SelectListItem{ Text="Honors", Value="Honors"},
                    new SelectListItem{ Text="Human Development", Value="Human Development"},
                    new SelectListItem{ Text="IELC", Value="IELC"},
                    new SelectListItem{ Text="Information Systems", Value="Information Systems"},
                    new SelectListItem{ Text="Information Technology in Education", Value="Information Technology in Education"},
                    new SelectListItem{ Text="Interdisciplinary", Value="Interdisciplinary"},
                    new SelectListItem{ Text="International Business &amp; Economics", Value="International Business &amp; Economics"},
                    new SelectListItem{ Text="International Relation", Value="International Relation"},
                    new SelectListItem{ Text="IT User Services", Value="IT User Services"},
                    new SelectListItem{ Text="JCSU", Value="JCSU"},
                    new SelectListItem{ Text="Journalism", Value="Journalism"},
                    new SelectListItem{ Text="Judicial College", Value="Judicial College"},
                    new SelectListItem{ Text="Kinesiology", Value="Kinesiology"},
                    new SelectListItem{ Text="Knowledge Center", Value="Knowledge Center"},
                    new SelectListItem{ Text="Liberal Arts", Value="Liberal Arts"},
                    new SelectListItem{ Text="Libraries", Value="Libraries"},
                    new SelectListItem{ Text="Library Services", Value="Library Services"},
                    new SelectListItem{ Text="LITA", Value="LITA"},
                    new SelectListItem{ Text="Lombardi", Value="Lombardi"},
                    new SelectListItem{ Text="Mackay School of Mines", Value="Mackay School of Mines"},
                    new SelectListItem{ Text="Management", Value="Management"},
                    new SelectListItem{ Text="Marketing", Value="Marketing"},
                    new SelectListItem{ Text="Material Science Engineering", Value="Material Science Engineering"},
                    new SelectListItem{ Text="Mathematics", Value="Mathematics"},
                    new SelectListItem{ Text="MBA", Value="MBA"},
                    new SelectListItem{ Text="Mechanical Engineering", Value="Mechanical Engineering"},
                    new SelectListItem{ Text="Medical School", Value="Medical School"},
                    new SelectListItem{ Text="Microbiology", Value="Microbiology"},
                    new SelectListItem{ Text="Mining Engineering", Value="Mining Engineering"},
                    new SelectListItem{ Text="MMI", Value="MMI"},
                    new SelectListItem{ Text="Molecular Microbiology and Immunology", Value="Molecular Microbiology and Immunology"},
                    new SelectListItem{ Text="Music", Value="Music"},
                    new SelectListItem{ Text="Music Education", Value="Music Education"},
                    new SelectListItem{ Text="NCED", Value="NCED"},
                    new SelectListItem{ Text="Neuroscience", Value="Neuroscience"},
                    new SelectListItem{ Text="Nevada Bureau of Mines and Geology", Value="Nevada Bureau of Mines and Geology"},
                    new SelectListItem{ Text="Nevada Career Studio", Value="Nevada Career Studio"},
                    new SelectListItem{ Text="Nevada Teach", Value="Nevada Teach"},
                    new SelectListItem{ Text="NRES", Value="NRES"},
                    new SelectListItem{ Text="Nursing", Value="Nursing"},
                    new SelectListItem{ Text="Nutrition", Value="Nutrition"},
                    new SelectListItem{ Text="Office for Prospective Students", Value="Office for Prospective Students"},
                    new SelectListItem{ Text="OFX", Value="OFX"},
                    new SelectListItem{ Text="OISS", Value="OISS"},
                    new SelectListItem{ Text="Other", Value="Other"},
                    new SelectListItem{ Text="Philosophy", Value="Philosophy"},
                    new SelectListItem{ Text="Photography", Value="Photography"},
                    new SelectListItem{ Text="Physic", Value="Physic"},
                    new SelectListItem{ Text="Physical Therapy", Value="Physical Therapy"},
                    new SelectListItem{ Text="Physics", Value="Physics"},
                    new SelectListItem{ Text="Police Services", Value="Police Services"},
                    new SelectListItem{ Text="Political Science", Value="Political Science"},
                    new SelectListItem{ Text="Pre-Business", Value="Pre-Business"},
                    new SelectListItem{ Text="Pre-Nursing", Value="Pre-Nursing"},
                    new SelectListItem{ Text="Psychology", Value="Psychology"},
                    new SelectListItem{ Text="Public Health", Value="Public Health"},
                    new SelectListItem{ Text="Public Relations", Value="Public Relations"},
                    new SelectListItem{ Text="Rangeland Ecology and Management", Value="Rangeland Ecology and Management"},
                    new SelectListItem{ Text="Residential Life, Housing and Food Service", Value="Residential Life, Housing and Food Service"},
                    new SelectListItem{ Text="Residential Life, Housing, and Food Services", Value="Residential Life, Housing, and Food Services"},
                    new SelectListItem{ Text="School Counseling", Value="School Counseling"},
                    new SelectListItem{ Text="Secondary Education", Value="Secondary Education"},
                    new SelectListItem{ Text="Seismology", Value="Seismology"},
                    new SelectListItem{ Text="Smallwood Bootcamp", Value="Smallwood Bootcamp"},
                    new SelectListItem{ Text="Social Work", Value="Social Work"},
                    new SelectListItem{ Text="Sociology", Value="Sociology"},
                    new SelectListItem{ Text="Spanish", Value="Spanish"},
                    new SelectListItem{ Text="Special Education", Value="Special Education"},
                    new SelectListItem{ Text="Speech Communication", Value="Speech Communication"},
                    new SelectListItem{ Text="Speech Pathology", Value="Speech Pathology"},
                    new SelectListItem{ Text="STEM", Value="STEM"},
                    new SelectListItem{ Text="Student Conduct", Value="Student Conduct"},
                    new SelectListItem{ Text="Teaching &amp; Learning Technologies", Value="Teaching &amp; Learning Technologies"},
                    new SelectListItem{ Text="Theater", Value="Theater"},
                    new SelectListItem{ Text="TRiO", Value="TRiO"},
                    new SelectListItem{ Text="Undeclared", Value="Undeclared"},
                    new SelectListItem{ Text="University Libraries", Value="University Libraries"},
                    new SelectListItem{ Text="University of Nevada Cooperative Extension 4-H Youth Development", Value="University of Nevada Cooperative Extension 4-H Youth Development"},
                    new SelectListItem{ Text="Upward Bound", Value="Upward Bound"},
                    new SelectListItem{ Text="USAC", Value="USAC"},
                    new SelectListItem{ Text="Vet Science", Value="Vet Science"},
                    new SelectListItem{ Text="Veterinarian Medicine", Value="Veterinarian Medicine"},
                    new SelectListItem{ Text="Wildlife Ecology &amp; Conservation", Value="Wildlife Ecology &amp; Conservation"},
                    new SelectListItem{ Text="Wolf Pack Veterans Club", Value="Wolf Pack Veterans Club"},
                    new SelectListItem{ Text="Women's Studies", Value="Women's Studies"},
                    new SelectListItem{ Text="Writing", Value="Writing"},


           })
                @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                <!-- <select id="Department" aria-labelledby="dept-label">

                </select> -->
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Customer Type: ", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CustType, new List<SelectListItem> {
                    new SelectListItem{ Text="Please select a customer type", Value=""},
                    new SelectListItem{ Text="Student", Value="Student"},
                    new SelectListItem{ Text="Faculty", Value="Faculty"},
                    new SelectListItem{ Text="Classified Staff", Value="Classified Staff"},
                    new SelectListItem{ Text="Community Patron", Value="Community Patron"},

           })
                @Html.ValidationMessageFor(model => model.CustType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Location, new List<SelectListItem> {
                    new SelectListItem{ Text="@One", Value="@One"},
                    new SelectListItem{ Text="DeLaMare", Value="DeLaMare"},
                    new SelectListItem{ Text="Savitt", Value="Savitt"},

           })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Purpose, new List<SelectListItem> {
                    new SelectListItem{ Text="Academic", Value="Academic"},
                    new SelectListItem{ Text="Personal", Value="Personal"},
                    new SelectListItem{ Text="University-Related", Value="University-Related"},
                    new SelectListItem{ Text="Commercial", Value="Commercial"},

           })
                @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div id="mathSection">

                    <div class="form-group">
                        @Html.LabelFor(model => model.PAPERTYPEzName, "PAPERTYPEName", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("PAPERTYPEName", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PAPERTYPEzName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div style="display:flex; flex-direction: row;">
                        <label>Width (In.) </label>
                        <input type="text" id="PaperWidth" name="PaperWidth" oninput="calculateTotal" />
                        <label>Height (In.) </label>
                        <input type="text" id="PaperHeight" name="PaperHeight" oninput="calculateTotal" />
                        <label>Item Units </label>
                        <input type="text" id="ItemUnits" name="ItemUnits" oninput="calculateTotal" />
                        <label># of Images </label>
                        <input type="text" id="NumImages" name="NumImages" oninput="calculateTotal" />
                        <label>
                            Gloss Laminate (in.)
                        </label>
                        <input type="text" id="NumLam" name="NumLam" oninput="calculateTotal" />
                        <label>
                            Matte Laminate
                            (in.)
                        </label>
                        <input type="text" id="NumLamMatte" name="NumLamMatte" oninput="calculateTotal" /><br />
                    </div>
                    <div id="totalPrice"></div>


                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <%: @Html.HiddenFor(model => model.TotalCost) %>
                <div id="DisplayCalculatedValue"></div>
            </div>
        </div>

        @Html.HiddenFor(model => model.LineSubtotal)


        <div>




            <div class="form-group">
                @Html.LabelFor(model => model.PaperCost, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PaperCost, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PaperCost, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.PaperUnits, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PaperUnits, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PaperUnits, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.PaperGrommet, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PaperGrommet, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PaperGrommet, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NumBoards, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumBoards, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NumBoards, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.OrderId, "OrderId", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("OrderId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OrderId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NumFrame, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumFrame, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NumFrame, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NumRhyno, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumRhyno, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NumRhyno, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NumTubes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumTubes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NumTubes, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CuttingFee, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CuttingFee, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CuttingFee, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("SaveUploadedFile", "Line", FormMethod.Post, new { @name = "myDropzone", id = "myDropzone", @enctype = "multipart/form-data" }))
{
    <br />

    <div>
        <div id="previews" class="dz-default dz-message box__input dropzone">
            <div style="text-align:center">
                <i class="fa fa-cloud-upload" style="font-size:23px;position:relative;top:4px;"></i> <span style="margin-left:20px">Drop files  to attach or browse</span>
            </div>
        </div>
        <div id="previewFiles"></div>
    </div>
    <br />
    <div>
        <input type="submit" id="Submit" name="Submit" class="btn btn-success m-t-5" value="Submit" />
    </div>
}



<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $(document).ready(function () {
            Dropzone.autoDiscover = false;
            $('#myDropzone').dropzone({
                //parameter name value
                paramName: "files",
                //clickable div id
                clickable: '#previews',
                //preview files container Id
                previewsContainer: "#previewFiles",
                autoProcessQueue: false,
                uploadMultiple: true,
                parallelUploads: 100,
                maxFiles: 100,
                url: "../Uploads/", // url here to save file
                maxFilesize: 100,//max file size in MB,
                addRemoveLinks: true,
                dictResponseError: 'Server not Configured',
                acceptedFiles: ".png,.jpg,.gif,.bmp,.jpeg,.pdf",// use this to restrict file type
                init: function () {
                    var self = this;
                    // config
                    self.options.addRemoveLinks = true;
                    self.options.dictRemoveFile = "Delete";
                    //New file added
                    self.on("addedfile", function (file) {
                        console.log('new file added ', file);
                        $('.dz-success-mark').hide();
                        $('.dz-error-mark').hide();
                    });
                    // Send file starts
                    self.on("sending", function (file) {
                        console.log('upload started', file);
                        $('.meter').show();
                    });

                    // File upload Progress
                    self.on("totaluploadprogress", function (progress) {
                        console.log("progress ", progress);
                        $('.roller').width(progress + '%');
                    });

                    self.on("queuecomplete", function (progress) {
                        $('.meter').delay(999).slideUp(999);
                    });

                    // On removing file
                    self.on("removedfile", function (file) {
                        console.log(file);
                    });

                    $('#Submit').on("click", function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        // Validate form here if needed

                        if (self.getQueuedFiles().length > 0) {
                            self.processQueue();


                        } else {
                            self.uploadFiles([]);
                            $('#myDropzone').submit();
                        }

                    });



                    self.on("successmultiple", function (files, response) {
                        // Gets triggered when the files have successfully been sent.
                        // Redirect user or notify of success.

                    });
                }
            });


        })

    </script>


    <script type="text/javascript">
        //File Upload response from the server
        Dropzone.options.dropzoneForm = {
            init: function () {
                this.on("complete", function (data) {
                    //var res = eval('(' + data.xhr.responseText + ')');
                    var res = JSON.parse(data.xhr.responseText);
                });
            }
        };
    </script>

    <script type="text/javascript">

        document.getElementById("PaperHeight").addEventListener("input", calculateTotal);
        document.getElementById("PaperWidth").addEventListener("input", calculateTotal);
        document.getElementById("ItemUnits").addEventListener("input", calculateTotal);
        document.getElementById("NumImages").addEventListener("input", calculateTotal);
        document.getElementById("NumLam").addEventListener("input", calculateTotal);
        document.getElementById("NumLamMatte").addEventListener("input", calculateTotal);
        document.getElementById("PaperHeight").addEventListener("load", hideTotal);
        function hideTotal() {
            var divobj = document.getElementById('totalPrice');
            divobj.style.display = 'none';
        }

        function round(value, decimals) {
            return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
        }
        // local variables
        function doDo() {
            var height = document.getElementById("PaperHeight").value;
            console.log(height)
            var width = document.getElementById("PaperWidth").value;
            //var cost = this.paperList.selected.get('price');
            var units = 0;
            var flooredHeight = 0;
            var modOfHeight = 0;
            var copies = round(document.getElementById("ItemUnits").value, 2);

            //Adding rouding up and down for lamination 4/6/15
            var lamHeight = document.getElementById("NumLam").value;
            //var lamCost = Options.models[0].attributes.price;
            var lamUnits = 0;
            var flooredLam = 0;
            var modOfLam = 0;

            var lamHeightMatte = document.getElementById("NumLamMatte").value;
            //var lamCostMatte = Options.models[0].attributes.price;
            var lamUnitsMatte = 0;
            var flooredLamMatte = 0;
            var modOfLamMatte = 0;
        }

        function getWidth() {
            //Assume form with id="theform"
            var theForm = document.forms["mathSection"];
            //Get a reference to the TextBox
            var quantity = document.getElementById("PaperWidth");
            var howmany = 0;
            //If the textbox is not blank
            if (quantity.value != "") {
                howmany = parseInt(quantity.value);
            }
            return howmany;
        }

        function getHeight() {
            //Assume form with id="theform"
            var theForm = document.forms["mathSection"];
            //Get a reference to the TextBox
            var quantity = document.getElementById("PaperHeight");
            var howmany = 0;
            //If the textbox is not blank
            if (quantity.value != "") {
                howmany = parseInt(quantity.value);
            }
            return howmany;
        }

        function getItemUnits() {
            //Assume form with id="theform"
            var theForm = document.forms["mathSection"];
            //Get a reference to the TextBox
            var quantity = document.getElementById("ItemUnits");
            var howmany = 0;
            //If the textbox is not blank
            if (quantity.value != "") {
                howmany = parseInt(quantity.value);
            }
            return howmany;
        }

        function getNumImages() {
            //Assume form with id="theform"
            var theForm = document.forms["mathSection"];
            //Get a reference to the TextBox
            var quantity = document.getElementById("NumImages");
            var howmany = 0;
            //If the textbox is not blank
            if (quantity.value != "") {
                howmany = parseInt(quantity.value);
            }
            return howmany;
        }

        function calculateTotal() {
            doDo()
            //Here we get the total price by calling our function
            //Each function returns a number so by calling them we add the values they return together
            var totalSum = getWidth() + getHeight() + getItemUnits() * getNumImages();

            //display the result
            var divobj = document.getElementById('totalPrice').innerHTML = "Total Price is $" + totalSum;
            //divobj.style.display = 'block';
            divobj.innerHTML = "Your total is now: " + totalSum;
            $('#TotalCost').val(totalSum);
            $('#DisplayCalculatedValue').html(totalSum);
            $('#LineSubtotal').val(totalSum);
        }



               // $(function () {
               //     $("#btnSubmit").click(function () {
               //         $("#postCost").value(totalSum);
               //     });
               // });
    </script>

}